var U = function(U) {
    var i, manifest = [ {
        src: "img/AxBattlerGA1.gif",
        id: "AxBattler"
    }, {
        src: "img/runningGrant.png",
        id: "grant"
    } ], handleProgress = function(progress) {
        $("#" + U.Scenes.loadingSceneId).find("#progress-bar").css({
            width: progress * 100 + "%"
        });
    };
    U.Scenes = {
        loadingSceneId: "loading-scene",
        gameSceneId: "game-scene"
    };
    U.switchToScene = function() {
        var current;
        return function(sceneId) {
            if (!sceneId) {
                return;
            }
            if (current) {
                $("#" + current).removeClass("shown");
            }
            $("#" + sceneId).addClass("shown");
            current = sceneId;
        };
    }();
    U.getPreloader = function() {
        var preloader;
        return function() {
            if (!preloader) {
                preloader = U.PreLoader.create(manifest);
                preloader.progress(handleProgress);
            }
            return preloader;
        };
    }();
    U.Objects = {};
    return U;
}(window.U || {});

var U = window.U || {};

U.Toolkit = U.Toolkit || function() {
    function EventDispatcher() {
        this.events = {};
    }
    EventDispatcher.prototype.events = {};
    EventDispatcher.prototype.addEventListener = function(type, listener) {
        if (!this.events[type]) this.events[type] = [];
        this.events[type].push(listener);
        return this;
    };
    EventDispatcher.prototype.removeEventListener = function(type, listener) {
        if (!this.events[type]) return this;
        var index = this.events[type].indexOf(listener);
        if (!this.events[type][index]) return this;
        this.events[type].splice(index, 1);
        return this;
    };
    EventDispatcher.prototype.dispatch = function(type, event) {
        if (!this.events[type]) return;
        for (var i in this.events[type]) {
            if (typeof this.events[type][i] === "function") {
                this.events[type][i](event);
            } else if (typeof this.events[type][i] === "object") {
                this.events[type][i][1].call(this.events[type][i][0], event);
            }
        }
    };
    return {
        EventDispatcher: EventDispatcher,
        isFunction: function(func) {
            return "function" === typeof func;
        }
    };
}();

var U = window.U || {};

U.PreLoader = function(toolkit) {
    var PreLoader = function(manifest) {
        var loader = new createjs.LoadQueue(false);
        this.loadAll = function() {
            var defer = function(promise) {
                loader.addEventListener("complete", promise);
                loader.loadManifest(manifest);
            };
            return {
                then: function(callback) {
                    if (toolkit.isFunction(callback)) {
                        defer(callback);
                    }
                }
            };
        };
        this.progress = function(callback) {
            if (toolkit.isFunction(callback)) {
                loader.addEventListener("progress", function() {
                    callback(loader.progress || 0);
                });
            }
        };
        this.getResult = function(id) {
            return loader.getResult(id);
        };
    };
    return {
        create: function(manifest) {
            if ("object" !== typeof manifest) {
                throw "Invalid manifest object has been passed!";
            }
            return new PreLoader(manifest);
        }
    };
}(U.Toolkit);

var U = window.U || {};

U.UIHandler = window.UIHandler || function(Modernizr, U, window, undefined) {
    var uiEvents = {
        37: {
            name: "left",
            pressed: false
        },
        39: {
            name: "right",
            pressed: false
        },
        38: {
            name: "up",
            pressed: false
        },
        40: {
            name: "down",
            pressed: false
        }
    }, handleKeyEvents = function(event) {
        var evt = event || window.event, keyCode = evt.keyCode, uiEventObject = uiEvents[keyCode];
        if (!uiEventObject) {
            return;
        }
        if ("keydown" === event.type) {
            uiEventObject.pressed = true;
        } else if ("keyup" === event.type) {
            uiEventObject.pressed = false;
        }
    }, gameScene;
    return {
        attach: function() {
            if (Modernizr.touch) {
                gameScene = $("#" + U.Scene.gameSceneId);
                gameScene.addEventListener("touchstart", handleTouchEvents);
                gameScene.addEventListener("touchend", handleTouchEvents);
            } else {
                window.addEventListener("keydown", handleKeyEvents);
                window.addEventListener("keyup", handleKeyEvents);
            }
        },
        isFired: function(uiEvent) {
            var code;
            switch (uiEvent) {
              case "left":
                code = 37;
                break;

              case "right":
                code = 39;
                break;

              case "up":
                code = 38;
                break;

              case "down":
                code = 40;
                break;

              default:
                return false;
            }
            if (!uiEvents[code]) {
                return false;
            }
            return uiEvents[code].pressed;
        }
    };
}(Modernizr, U, window);

var U = window.U || {};

U.Objects = function(O) {
    var objects = [];
    O.guid = 0;
    O.createObject = function(objectFunc, id) {
        var object;
        object = new objectFunc();
        object.guid = id;
        objects.push(object);
        return {
            get: function() {
                return object;
            },
            appendTo: function(stage) {
                if (!stage || !stage.addChild) {
                    throw "Invalid parent object given as a parameter!";
                }
                if (U.Toolkit.isFunction(object.appendTo)) {
                    object.appendTo(stage);
                } else {
                    stage.addChild(object);
                }
                return this;
            }
        };
    };
    O.getObjects = function() {
        return objects;
    };
    O.getObjectById = function(id) {
        if (!id) {
            return null;
        }
        for (var i = objects.length - 1; i >= 0; i--) {
            if (id === objects[i].guid) {
                return objects[i];
            }
        }
        return null;
    };
    O.removeObject = function(id) {
        var object = getObjectById(id), i;
        object.getParent().removeChild(object);
        for (i = objects.length - 1; i >= 0; i--) {
            if (id === objects[i].guid) {
                delete objects[i];
                return;
            }
        }
    };
    return O;
}(U.Objects || {});

var U = window.U || {};

U.Objects = U.Objects || {};

U.Objects.Monster = function() {
    function Monster() {
        this.initialize();
    }
    var p = Monster.prototype = new createjs.Container();
    p.monsterShape = null;
    p.vX = null;
    p.vY = null;
    p.parent = null;
    p.Container_initialize = p.initialize;
    p.createSprite = function() {
        var spriteSheet = new createjs.SpriteSheet({
            images: [ U.getPreloader().getResult("grant") ],
            frames: {
                regX: 0,
                height: 292,
                count: 64,
                regY: 0,
                width: 165
            },
            animations: {
                run: [ 0, 25, "run", 1.5 ],
                jump: [ 26, 63, "run" ]
            }
        });
        this.monsterShape = new createjs.Sprite(spriteSheet);
        this.monsterShape.framerate = 30;
        this.addChild(this.monsterShape);
    };
    p.initialize = function() {
        this.Container_initialize();
        this.createSprite();
        this.vX = 0;
        this.vY = 0;
    };
    p.appendTo = function(stage) {
        if (!stage || !stage.addChild) {
            throw "Invalid stage object given as a parameter!";
        }
        stage.addChild(this);
        this.parent = stage;
    };
    p.getParent = function() {
        return this.parent;
    };
    p.tick = function(event) {
        this.x += this.vX * event.delta;
        this.y += this.vY * event.delta;
    };
    return Monster;
}();

var U = window.U || {};

U.Game = function() {
    var i, j, stage = new createjs.Stage("game-canvas"), setupObjects = function() {}, startGameLoop = function() {
        createjs.Ticker.timingMode = createjs.Ticker.RAF;
        createjs.Ticker.setFPS(60);
        createjs.Ticker.addEventListener("tick", tick);
    }, tick = function(event) {
        tickAllObjects(event);
        stage.update(event);
    }, tickAllObjects = function(event) {
        var objects = U.Objects.getObjects();
        for (var i = objects.length - 1; i >= 0; i--) {
            objects[i].tick(event);
        }
    };
    return {
        init: function() {
            var that = this;
            U.getPreloader().loadAll().then(function() {
                U.switchToScene(U.Scenes.gameSceneId);
                (that || U.Game).start();
            });
            U.UIHandler.attach();
        },
        start: function() {
            setupObjects();
            startGameLoop();
        },
        getStage: function() {
            return stage;
        }
    };
}();

(function(U, toolkit, game, window, document, undefined) {
    window.addEventListener("load", function() {
        game.init();
    });
})(U, U.Toolkit, U.Game, window, window.document);