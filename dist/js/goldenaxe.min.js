var U = window.U || {};

U.Toolkit = U.Toolkit || function() {
    function EventDispatcher() {
        this.events = {};
    }
    EventDispatcher.prototype.events = {};
    EventDispatcher.prototype.addEventListener = function(type, listener) {
        if (!this.events[type]) this.events[type] = [];
        this.events[type].push(listener);
        return this;
    };
    EventDispatcher.prototype.removeEventListener = function(type, listener) {
        if (!this.events[type]) return this;
        var index = this.events[type].indexOf(listener);
        if (!this.events[type][index]) return this;
        this.events[type].splice(index, 1);
        return this;
    };
    EventDispatcher.prototype.dispatch = function(type, event) {
        if (!this.events[type]) return;
        for (var i in this.events[type]) {
            if (typeof this.events[type][i] === "function") {
                this.events[type][i](event);
            } else if (typeof this.events[type][i] === "object") {
                this.events[type][i][1].call(this.events[type][i][0], event);
            }
        }
    };
}();

var U = window.U || {};

U.PreLoader = function() {
    var PreLoader = function(manifest) {
        var loader;
        return {
            loadAll: function() {
                var defer = function(promise) {
                    loader = new createjs.LoadQueue(false);
                    loader.addEventListener("complete", promise);
                    loader.loadManifest(manifest);
                };
                return {
                    then: function(callback) {
                        if ("function" !== typeof callback) {
                            return;
                        }
                        defer(callback);
                    }
                };
            },
            getResult: function(id) {
                return loader.getResult(id);
            }
        };
    };
    return {
        create: function(manifest) {
            if ("object" !== typeof manifest) {
                throw "Invalid manifest object has been passed!";
            }
            return new PreLoader(manifest);
        }
    };
}();

var U = window.U || {};

U.Game = function() {
    var preloader = U.PreLoader.create([ {
        src: "img/AxBattlerGA1.gif",
        id: "AxBattler"
    } ]), stage = new createjs.Stage("game-canvas"), tick = function(event) {
        stage.update();
    };
    return U.Game || {
        init: function(callback) {
            preloader.loadAll().then(function() {
                if ("function" !== typeof callback) {
                    return;
                }
                console.log("Resources have been preloaded", preloader.getResult("AxBattler"));
                callback();
            });
        },
        start: function() {
            createjs.Ticker.timingMode = createjs.Ticker.RAF;
            createjs.Ticker.setFPS(60);
            createjs.Ticker.addEventListener("tick", tick);
        }
    };
}();

(function(U, toolkit, game, window, document, undefined) {
    this.switchToScene = function() {
        var current;
        return function(sceneId) {
            if (!sceneId) {
                return;
            }
            if (current) {
                $("#" + current).removeClass("shown");
            }
            $("#" + sceneId).addClass("shown");
            current = sceneId;
        };
    }();
    window.addEventListener("load", function() {
        game.init(function() {
            game.start();
            console.log("Game has been started...");
        });
    });
})(U, U.Toolkit, U.Game, window, window.document);