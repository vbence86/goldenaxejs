------------------------------------------------------------------------
Day 0
------------------------------------------------------------------------

Getting started with the project, prepering myself for the hard work and 
making some progress with respect of the setting up the development 
environment.

1) main idea: 
   * recreation of the old game called Golden Axe (paying tribute, appriciation for the good times)
   * Having spent a lot of time with this game, I though it would've been a good idea to port to web

2) Initial phase
   * Estalbishing the deleopment environment (grunt tasks, htmlboilerplate)
   * Makin the essential design choices 
      + mostly deciding wich framework should be used: EaselJS, Phraser, melonJS
   * Installing the required components
   * Creating a mockup scene to start playing around


------------------------------------------------------------------------
Day 1
------------------------------------------------------------------------

Adding basic components of EaselJS to the implementation and starting to 
establish the initial structure of the used modules. Building up the game 
loop and implementing the preloading process.


------------------------------------------------------------------------
Day 2
------------------------------------------------------------------------

Creating layout for the scenes, providing them with the appropriate CSS 
classes so that the game can switch between them gracefully using 
fade in/out transitions. 
Linking the scene switching logic to the preloader object.

------------------------------------------------------------------------
Day 3
------------------------------------------------------------------------

Adding event listeners for UI events. As the player will be able control 
the character either by using the keyboard in dekstop mode or touching the
virtual controls on Mobiles, I have to provide a unified solution to 
register business logic to the UI events such as moving towards specified
directions and so forth.

------------------------------------------------------------------------
Day 5
------------------------------------------------------------------------

Establish the basic mechanism for storing game elements such as characters.
Improving the preloading process to return a percentage value of the current loading process so that I can use it to use a verbose loading indicator.

------------------------------------------------------------------------
Day 6
------------------------------------------------------------------------

Impelementing a helper object to manage objects such as monsters, ornaments etc. attached to the game stage.
Providing functionality to gain access to object references by using their unique identifier.

example of usin the object creation API:
U.Objects.createObject(U.Objects.Monster).appendTo(stage).get();

adding functionality for:
- adding objects to the game state
- removing objects from the game state
- identifying objects by a unique ID
- receiving reference to an object by the given ID
- returning all the registered objects 

------------------------------------------------------------------------
Day 7
------------------------------------------------------------------------

Adding code for being able to inherit objects from the Monster "class" and specify the used sprite sheets only. Examaning how the input data for the easejl.SpriteSheet object should be contructed, finding out how the output json file looks like that is generated by TexturePacker for EaselJS.

------------------------------------------------------------------------
Day 8
------------------------------------------------------------------------

Examining how the rendering process of a map created by Tiled should be contructed, I found a nice article that can help me to save implementation time:

https://gist.github.com/shaneriley/4078905

The following link shows how you can utilize the functionality that EaselJS offers to render a map generated by Tiled:

http://sertaogames.com/2012/12/05/tilemap-loader-for-html5-canvas-easeljs/

I also have to make sure whether or not I could use PreloaderJS to preload JSON resources during my preloading process.

------------------------------------------------------------------------
Day 9
------------------------------------------------------------------------

Finalizing and cleaning up the map loader logic so that I can load a map into the game exported from Tiled.


------------------------------------------------------------------------
Day 10
------------------------------------------------------------------------

Cleaning up the map loader code, removing the asyncronious fashion from the tileset loading process.
Adding easeljs.Container objects to each of the layers declared in the generated Map file. Adding all the tile elements to these Containers in order to make it possible to scroll them using different velocity.

------------------------------------------------------------------------
Day 11
------------------------------------------------------------------------

Refactoring map loader code in order to be more readable and reusable.

------------------------------------------------------------------------
Day 12
------------------------------------------------------------------------

Finishing to refactor the map loader and renderer code
Adding scrolling logic to map manager object

------------------------------------------------------------------------
Day 13
------------------------------------------------------------------------

Scrolling has been restricted depending on the current viewport and the used map size.
TweenJS has been added to the project to perform smooth animations while scrolling.

------------------------------------------------------------------------
Day 15
------------------------------------------------------------------------

Adding a centerTo function to the U.Map object so that we could follow a individual monster that most of the time should be the player's monster.

------------------------------------------------------------------------
Day 16
------------------------------------------------------------------------

Testing centerTo function